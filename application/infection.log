Escaped mutants:
================

Timed Out mutants:
==================

Skipped mutants:
================

Not Covered mutants:
====================

1) src/Infrastructure/Behat/Context/ApplicationContext.php:46    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * @BeforeFeature
      * @AfterScenario @PurgeDatabase
      */
-    public static function purgeDatabase()
+    protected static function purgeDatabase()
     {
         $purger = new ORMPurger(self::$entityManager, self::EXCLUDED_TABLES);
         $purger->purge();


2) src/Infrastructure/Behat/Context/ApplicationContext.php:49    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public static function purgeDatabase()
     {
         $purger = new ORMPurger(self::$entityManager, self::EXCLUDED_TABLES);
-        $purger->purge();
+        
     }
     /**
      * @Given  /^A category that exists:$/


3) src/Infrastructure/Behat/Context/ApplicationContext.php:56    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * @Given  /^A category that exists:$/
      * @throws AssertionFailedException
      */
-    public function aCategoryThatExists(TableNode $table)
+    protected function aCategoryThatExists(TableNode $table)
     {
         foreach ($table->getHash() as $row) {
             $category = Category::create(CategoryId::from($row['id']), CategoryName::from($row['name']), CategoryDescription::from($row['description']));


4) src/Infrastructure/Behat/Context/ApplicationContext.php:58    [M] Foreach_

--- Original
+++ New
@@ @@
      */
     public function aCategoryThatExists(TableNode $table)
     {
-        foreach ($table->getHash() as $row) {
+        foreach (array() as $row) {
             $category = Category::create(CategoryId::from($row['id']), CategoryName::from($row['name']), CategoryDescription::from($row['description']));
             $this->categoryRepository->save($category);
         }


5) src/Infrastructure/Behat/Context/ApplicationContext.php:65    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         foreach ($table->getHash() as $row) {
             $category = Category::create(CategoryId::from($row['id']), CategoryName::from($row['name']), CategoryDescription::from($row['description']));
-            $this->categoryRepository->save($category);
+            
         }
     }
     /**


6) src/Infrastructure/Behat/Context/ApplicationContext.php:73    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * @Given /^A product that exists:$/
      * @throws AssertionFailedException
      */
-    public function aProductThatExists(TableNode $table)
+    protected function aProductThatExists(TableNode $table)
     {
         foreach ($table->getHash() as $row) {
             $category = Product::create(ProductId::from($row['id']), ProductName::from($row['name']), null, ProductPrice::from((float) $row['price']), Currency::from($row['currency']), (bool) $row['featured']);


7) src/Infrastructure/Behat/Context/ApplicationContext.php:75    [M] Foreach_

--- Original
+++ New
@@ @@
      */
     public function aProductThatExists(TableNode $table)
     {
-        foreach ($table->getHash() as $row) {
+        foreach (array() as $row) {
             $category = Product::create(ProductId::from($row['id']), ProductName::from($row['name']), null, ProductPrice::from((float) $row['price']), Currency::from($row['currency']), (bool) $row['featured']);
             $this->productRepository->save($category);
         }
     }
 }


8) src/Infrastructure/Behat/Context/ApplicationContext.php:80    [M] CastFloat

--- Original
+++ New
@@ @@
     public function aProductThatExists(TableNode $table)
     {
         foreach ($table->getHash() as $row) {
-            $category = Product::create(ProductId::from($row['id']), ProductName::from($row['name']), null, ProductPrice::from((float) $row['price']), Currency::from($row['currency']), (bool) $row['featured']);
+            $category = Product::create(ProductId::from($row['id']), ProductName::from($row['name']), null, ProductPrice::from($row['price']), Currency::from($row['currency']), (bool) $row['featured']);
             $this->productRepository->save($category);
         }
     }
 }


9) src/Infrastructure/Behat/Context/ApplicationContext.php:82    [M] CastBool

--- Original
+++ New
@@ @@
     public function aProductThatExists(TableNode $table)
     {
         foreach ($table->getHash() as $row) {
-            $category = Product::create(ProductId::from($row['id']), ProductName::from($row['name']), null, ProductPrice::from((float) $row['price']), Currency::from($row['currency']), (bool) $row['featured']);
+            $category = Product::create(ProductId::from($row['id']), ProductName::from($row['name']), null, ProductPrice::from((float) $row['price']), Currency::from($row['currency']), $row['featured']);
             $this->productRepository->save($category);
         }
     }
 }


10) src/Infrastructure/Behat/Context/ApplicationContext.php:85    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         foreach ($table->getHash() as $row) {
             $category = Product::create(ProductId::from($row['id']), ProductName::from($row['name']), null, ProductPrice::from((float) $row['price']), Currency::from($row['currency']), (bool) $row['featured']);
-            $this->productRepository->save($category);
+            
         }
     }
 }


11) src/Infrastructure/CurrencyConversor/CurrencyConversorExchangeRatesApi.php:32    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
     private function getLatestValues()
     {
         $response = $this->client->request('GET', sprintf(self::URL, $this->key));
-        print_r($response);
+        
     }
     /**
      * @throws AssertionFailedException


12) src/Infrastructure/CurrencyConversor/CurrencyConversorExchangeRatesApi.php:40    [M] Equal

--- Original
+++ New
@@ @@
      */
     public function convertPrice(ProductPrice $priceFrom, Currency $from, Currency $to) : ProductPrice
     {
-        if ('EUR' === $from->value() && 'USD' == $to->value()) {
+        if ('EUR' === $from->value() && 'USD' != $to->value()) {
             return ProductPrice::from($priceFrom->value() * $this->oneEurInUSD);
         }
         if ('USD' === $from->value() && 'EUR' == $to->value()) {


13) src/Infrastructure/CurrencyConversor/CurrencyConversorExchangeRatesApi.php:40    [M] LogicalAnd

--- Original
+++ New
@@ @@
      */
     public function convertPrice(ProductPrice $priceFrom, Currency $from, Currency $to) : ProductPrice
     {
-        if ('EUR' === $from->value() && 'USD' == $to->value()) {
+        if ('EUR' === $from->value() || 'USD' == $to->value()) {
             return ProductPrice::from($priceFrom->value() * $this->oneEurInUSD);
         }
         if ('USD' === $from->value() && 'EUR' == $to->value()) {


14) src/Infrastructure/CurrencyConversor/CurrencyConversorExchangeRatesApi.php:40    [M] Identical

--- Original
+++ New
@@ @@
      */
     public function convertPrice(ProductPrice $priceFrom, Currency $from, Currency $to) : ProductPrice
     {
-        if ('EUR' === $from->value() && 'USD' == $to->value()) {
+        if ('EUR' !== $from->value() && 'USD' == $to->value()) {
             return ProductPrice::from($priceFrom->value() * $this->oneEurInUSD);
         }
         if ('USD' === $from->value() && 'EUR' == $to->value()) {


15) src/Infrastructure/CurrencyConversor/CurrencyConversorExchangeRatesApi.php:41    [M] Multiplication

--- Original
+++ New
@@ @@
     public function convertPrice(ProductPrice $priceFrom, Currency $from, Currency $to) : ProductPrice
     {
         if ('EUR' === $from->value() && 'USD' == $to->value()) {
-            return ProductPrice::from($priceFrom->value() * $this->oneEurInUSD);
+            return ProductPrice::from($priceFrom->value() / $this->oneEurInUSD);
         }
         if ('USD' === $from->value() && 'EUR' == $to->value()) {
             return ProductPrice::from($priceFrom->value() / $this->oneEurInUSD);


16) src/Infrastructure/CurrencyConversor/CurrencyConversorExchangeRatesApi.php:44    [M] Identical

--- Original
+++ New
@@ @@
         if ('EUR' === $from->value() && 'USD' == $to->value()) {
             return ProductPrice::from($priceFrom->value() * $this->oneEurInUSD);
         }
-        if ('USD' === $from->value() && 'EUR' == $to->value()) {
+        if ('USD' !== $from->value() && 'EUR' == $to->value()) {
             return ProductPrice::from($priceFrom->value() / $this->oneEurInUSD);
         }
         return $priceFrom;
     }
 }


17) src/Infrastructure/CurrencyConversor/CurrencyConversorExchangeRatesApi.php:44    [M] Equal

--- Original
+++ New
@@ @@
         if ('EUR' === $from->value() && 'USD' == $to->value()) {
             return ProductPrice::from($priceFrom->value() * $this->oneEurInUSD);
         }
-        if ('USD' === $from->value() && 'EUR' == $to->value()) {
+        if ('USD' === $from->value() && 'EUR' != $to->value()) {
             return ProductPrice::from($priceFrom->value() / $this->oneEurInUSD);
         }
         return $priceFrom;
     }
 }


18) src/Infrastructure/CurrencyConversor/CurrencyConversorExchangeRatesApi.php:44    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if ('EUR' === $from->value() && 'USD' == $to->value()) {
             return ProductPrice::from($priceFrom->value() * $this->oneEurInUSD);
         }
-        if ('USD' === $from->value() && 'EUR' == $to->value()) {
+        if ('USD' === $from->value() || 'EUR' == $to->value()) {
             return ProductPrice::from($priceFrom->value() / $this->oneEurInUSD);
         }
         return $priceFrom;
     }
 }


19) src/Infrastructure/CurrencyConversor/CurrencyConversorExchangeRatesApi.php:45    [M] Division

--- Original
+++ New
@@ @@
             return ProductPrice::from($priceFrom->value() * $this->oneEurInUSD);
         }
         if ('USD' === $from->value() && 'EUR' == $to->value()) {
-            return ProductPrice::from($priceFrom->value() / $this->oneEurInUSD);
+            return ProductPrice::from($priceFrom->value() * $this->oneEurInUSD);
         }
         return $priceFrom;
     }
 }


20) src/Infrastructure/Delivery/Rest/Category/CreateCategoryPage.php:22    [M] FalseValue

--- Original
+++ New
@@ @@
      */
     public function __invoke(Request $request) : JsonResponse
     {
-        $payload = json_decode($request->getContent(), false);
+        $payload = json_decode($request->getContent(), true);
         $id = $payload->id ?? Uuid::uuid4()->toString();
         $this->dispatch(new CreateCategoryCommand($id, $payload->name ?? '', $payload->description ?? ''));
         return new JsonResponse(['id' => $id], Response::HTTP_OK);
     }
 }


21) src/Infrastructure/Delivery/Rest/Category/CreateCategoryPage.php:24    [M] Coalesce

--- Original
+++ New
@@ @@
     public function __invoke(Request $request) : JsonResponse
     {
         $payload = json_decode($request->getContent(), false);
-        $id = $payload->id ?? Uuid::uuid4()->toString();
+        $id = Uuid::uuid4()->toString();
         $this->dispatch(new CreateCategoryCommand($id, $payload->name ?? '', $payload->description ?? ''));
         return new JsonResponse(['id' => $id], Response::HTTP_OK);
     }
 }


22) src/Infrastructure/Delivery/Rest/Category/CreateCategoryPage.php:26    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $payload = json_decode($request->getContent(), false);
         $id = $payload->id ?? Uuid::uuid4()->toString();
-        $this->dispatch(new CreateCategoryCommand($id, $payload->name ?? '', $payload->description ?? ''));
+        
         return new JsonResponse(['id' => $id], Response::HTTP_OK);
     }
 }


23) src/Infrastructure/Delivery/Rest/Category/CreateCategoryPage.php:29    [M] Coalesce

--- Original
+++ New
@@ @@
     {
         $payload = json_decode($request->getContent(), false);
         $id = $payload->id ?? Uuid::uuid4()->toString();
-        $this->dispatch(new CreateCategoryCommand($id, $payload->name ?? '', $payload->description ?? ''));
+        $this->dispatch(new CreateCategoryCommand($id, '', $payload->description ?? ''));
         return new JsonResponse(['id' => $id], Response::HTTP_OK);
     }
 }


24) src/Infrastructure/Delivery/Rest/Category/CreateCategoryPage.php:30    [M] Coalesce

--- Original
+++ New
@@ @@
     {
         $payload = json_decode($request->getContent(), false);
         $id = $payload->id ?? Uuid::uuid4()->toString();
-        $this->dispatch(new CreateCategoryCommand($id, $payload->name ?? '', $payload->description ?? ''));
+        $this->dispatch(new CreateCategoryCommand($id, $payload->name ?? '', ''));
         return new JsonResponse(['id' => $id], Response::HTTP_OK);
     }
 }


25) src/Infrastructure/Delivery/Rest/Category/CreateCategoryPage.php:34    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $payload = json_decode($request->getContent(), false);
         $id = $payload->id ?? Uuid::uuid4()->toString();
         $this->dispatch(new CreateCategoryCommand($id, $payload->name ?? '', $payload->description ?? ''));
-        return new JsonResponse(['id' => $id], Response::HTTP_OK);
+        return new JsonResponse([], Response::HTTP_OK);
     }
 }


26) src/Infrastructure/Delivery/Rest/Category/UpdateCategoryPage.php:21    [M] FalseValue

--- Original
+++ New
@@ @@
      */
     public function __invoke(string $id, Request $request) : JsonResponse
     {
-        $payload = json_decode($request->getContent(), false);
+        $payload = json_decode($request->getContent(), true);
         $result = $this->dispatch(new UpdateCategoryCommand($id, $payload->name ?? '', $payload->descriptin ?? ''));
         return new JsonResponse($result, Response::HTTP_OK);
     }
 }


27) src/Infrastructure/Delivery/Rest/Category/UpdateCategoryPage.php:26    [M] Coalesce

--- Original
+++ New
@@ @@
     public function __invoke(string $id, Request $request) : JsonResponse
     {
         $payload = json_decode($request->getContent(), false);
-        $result = $this->dispatch(new UpdateCategoryCommand($id, $payload->name ?? '', $payload->descriptin ?? ''));
+        $result = $this->dispatch(new UpdateCategoryCommand($id, '', $payload->descriptin ?? ''));
         return new JsonResponse($result, Response::HTTP_OK);
     }
 }


28) src/Infrastructure/Delivery/Rest/Category/UpdateCategoryPage.php:27    [M] Coalesce

--- Original
+++ New
@@ @@
     public function __invoke(string $id, Request $request) : JsonResponse
     {
         $payload = json_decode($request->getContent(), false);
-        $result = $this->dispatch(new UpdateCategoryCommand($id, $payload->name ?? '', $payload->descriptin ?? ''));
+        $result = $this->dispatch(new UpdateCategoryCommand($id, $payload->name ?? '', ''));
         return new JsonResponse($result, Response::HTTP_OK);
     }
 }


29) src/Infrastructure/Delivery/Rest/Product/CreateProductPage.php:22    [M] FalseValue

--- Original
+++ New
@@ @@
      */
     public function __invoke(Request $request) : JsonResponse
     {
-        $payload = json_decode($request->getContent(), false);
+        $payload = json_decode($request->getContent(), true);
         $id = $payload->id ?? Uuid::uuid4()->toString();
         $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, $payload->price ?? 0, $payload->currency ?? '', $payload->featured ?? false));
         return new JsonResponse(['id' => $id], Response::HTTP_OK);
     }
 }


30) src/Infrastructure/Delivery/Rest/Product/CreateProductPage.php:24    [M] Coalesce

--- Original
+++ New
@@ @@
     public function __invoke(Request $request) : JsonResponse
     {
         $payload = json_decode($request->getContent(), false);
-        $id = $payload->id ?? Uuid::uuid4()->toString();
+        $id = Uuid::uuid4()->toString();
         $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, $payload->price ?? 0, $payload->currency ?? '', $payload->featured ?? false));
         return new JsonResponse(['id' => $id], Response::HTTP_OK);
     }
 }


31) src/Infrastructure/Delivery/Rest/Product/CreateProductPage.php:26    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $payload = json_decode($request->getContent(), false);
         $id = $payload->id ?? Uuid::uuid4()->toString();
-        $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, $payload->price ?? 0, $payload->currency ?? '', $payload->featured ?? false));
+        
         return new JsonResponse(['id' => $id], Response::HTTP_OK);
     }
 }


32) src/Infrastructure/Delivery/Rest/Product/CreateProductPage.php:29    [M] Coalesce

--- Original
+++ New
@@ @@
     {
         $payload = json_decode($request->getContent(), false);
         $id = $payload->id ?? Uuid::uuid4()->toString();
-        $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, $payload->price ?? 0, $payload->currency ?? '', $payload->featured ?? false));
+        $this->dispatch(new CreateProductCommand($id, '', $payload->categoryId ?? null, $payload->price ?? 0, $payload->currency ?? '', $payload->featured ?? false));
         return new JsonResponse(['id' => $id], Response::HTTP_OK);
     }
 }


33) src/Infrastructure/Delivery/Rest/Product/CreateProductPage.php:30    [M] Coalesce

--- Original
+++ New
@@ @@
     {
         $payload = json_decode($request->getContent(), false);
         $id = $payload->id ?? Uuid::uuid4()->toString();
-        $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, $payload->price ?? 0, $payload->currency ?? '', $payload->featured ?? false));
+        $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', null, $payload->price ?? 0, $payload->currency ?? '', $payload->featured ?? false));
         return new JsonResponse(['id' => $id], Response::HTTP_OK);
     }
 }


34) src/Infrastructure/Delivery/Rest/Product/CreateProductPage.php:31    [M] DecrementInteger

--- Original
+++ New
@@ @@
     {
         $payload = json_decode($request->getContent(), false);
         $id = $payload->id ?? Uuid::uuid4()->toString();
-        $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, $payload->price ?? 0, $payload->currency ?? '', $payload->featured ?? false));
+        $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, $payload->price ?? -1, $payload->currency ?? '', $payload->featured ?? false));
         return new JsonResponse(['id' => $id], Response::HTTP_OK);
     }
 }


35) src/Infrastructure/Delivery/Rest/Product/CreateProductPage.php:31    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
         $payload = json_decode($request->getContent(), false);
         $id = $payload->id ?? Uuid::uuid4()->toString();
-        $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, $payload->price ?? 0, $payload->currency ?? '', $payload->featured ?? false));
+        $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, $payload->price ?? 1, $payload->currency ?? '', $payload->featured ?? false));
         return new JsonResponse(['id' => $id], Response::HTTP_OK);
     }
 }


36) src/Infrastructure/Delivery/Rest/Product/CreateProductPage.php:31    [M] Coalesce

--- Original
+++ New
@@ @@
     {
         $payload = json_decode($request->getContent(), false);
         $id = $payload->id ?? Uuid::uuid4()->toString();
-        $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, $payload->price ?? 0, $payload->currency ?? '', $payload->featured ?? false));
+        $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, 0, $payload->currency ?? '', $payload->featured ?? false));
         return new JsonResponse(['id' => $id], Response::HTTP_OK);
     }
 }


37) src/Infrastructure/Delivery/Rest/Product/CreateProductPage.php:32    [M] Coalesce

--- Original
+++ New
@@ @@
     {
         $payload = json_decode($request->getContent(), false);
         $id = $payload->id ?? Uuid::uuid4()->toString();
-        $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, $payload->price ?? 0, $payload->currency ?? '', $payload->featured ?? false));
+        $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, $payload->price ?? 0, '', $payload->featured ?? false));
         return new JsonResponse(['id' => $id], Response::HTTP_OK);
     }
 }


38) src/Infrastructure/Delivery/Rest/Product/CreateProductPage.php:33    [M] FalseValue

--- Original
+++ New
@@ @@
     {
         $payload = json_decode($request->getContent(), false);
         $id = $payload->id ?? Uuid::uuid4()->toString();
-        $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, $payload->price ?? 0, $payload->currency ?? '', $payload->featured ?? false));
+        $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, $payload->price ?? 0, $payload->currency ?? '', $payload->featured ?? true));
         return new JsonResponse(['id' => $id], Response::HTTP_OK);
     }
 }


39) src/Infrastructure/Delivery/Rest/Product/CreateProductPage.php:33    [M] Coalesce

--- Original
+++ New
@@ @@
     {
         $payload = json_decode($request->getContent(), false);
         $id = $payload->id ?? Uuid::uuid4()->toString();
-        $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, $payload->price ?? 0, $payload->currency ?? '', $payload->featured ?? false));
+        $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, $payload->price ?? 0, $payload->currency ?? '', false));
         return new JsonResponse(['id' => $id], Response::HTTP_OK);
     }
 }


40) src/Infrastructure/Delivery/Rest/Product/CreateProductPage.php:37    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $payload = json_decode($request->getContent(), false);
         $id = $payload->id ?? Uuid::uuid4()->toString();
         $this->dispatch(new CreateProductCommand($id, $payload->name ?? '', $payload->categoryId ?? null, $payload->price ?? 0, $payload->currency ?? '', $payload->featured ?? false));
-        return new JsonResponse(['id' => $id], Response::HTTP_OK);
+        return new JsonResponse([], Response::HTTP_OK);
     }
 }


41) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineCategoryRepository.php:29    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function save(Category $category) : void
     {
-        $this->entityManager->persist($category);
+        
         $this->entityManager->flush();
     }
     public function delete(Category $category) : void


42) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineCategoryRepository.php:30    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function save(Category $category) : void
     {
         $this->entityManager->persist($category);
-        $this->entityManager->flush();
+        
     }
     public function delete(Category $category) : void
     {


43) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineCategoryRepository.php:35    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function delete(Category $category) : void
     {
-        $this->entityManager->remove($category);
+        
         $this->entityManager->flush();
     }
     /** @throws DomainException */


44) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineCategoryRepository.php:36    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function delete(Category $category) : void
     {
         $this->entityManager->remove($category);
-        $this->entityManager->flush();
+        
     }
     /** @throws DomainException */
     public function ofIdOrFail(CategoryId $categoryId) : Category


45) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineCategoryRepository.php:44    [M] LogicalNot

--- Original
+++ New
@@ @@
     public function ofIdOrFail(CategoryId $categoryId) : Category
     {
         $category = $this->repository->find($categoryId->value());
-        if (!$category instanceof Category) {
+        if ($category instanceof Category) {
             throw CategoryNotFoundException::create($categoryId->value());
         }
         return $category;


46) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineCategoryRepository.php:44    [M] InstanceOf_

--- Original
+++ New
@@ @@
     public function ofIdOrFail(CategoryId $categoryId) : Category
     {
         $category = $this->repository->find($categoryId->value());
-        if (!$category instanceof Category) {
+        if (!false) {
             throw CategoryNotFoundException::create($categoryId->value());
         }
         return $category;


47) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineCategoryRepository.php:44    [M] InstanceOf_

--- Original
+++ New
@@ @@
     public function ofIdOrFail(CategoryId $categoryId) : Category
     {
         $category = $this->repository->find($categoryId->value());
-        if (!$category instanceof Category) {
+        if (!true) {
             throw CategoryNotFoundException::create($categoryId->value());
         }
         return $category;


48) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineCategoryRepository.php:45    [M] Throw_

--- Original
+++ New
@@ @@
     {
         $category = $this->repository->find($categoryId->value());
         if (!$category instanceof Category) {
-            throw CategoryNotFoundException::create($categoryId->value());
+            CategoryNotFoundException::create($categoryId->value());
         }
         return $category;
     }


49) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:33    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function save(Product $product) : void
     {
-        $this->entityManager->persist($product);
+        
         $this->entityManager->flush();
     }
     /** @throws QueryException


50) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:34    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function save(Product $product) : void
     {
         $this->entityManager->persist($product);
-        $this->entityManager->flush();
+        
     }
     /** @throws QueryException
      * @throws AssertionFailedException


51) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:40    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     /** @throws QueryException
      * @throws AssertionFailedException
      */
-    public function search(?bool $isFeatured, int $numPage = 0, int $limit = 0) : array
+    public function search(?bool $isFeatured, int $numPage = 0, int $limit = 1) : array
     {
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');


52) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:40    [M] DecrementInteger

--- Original
+++ New
@@ @@
     /** @throws QueryException
      * @throws AssertionFailedException
      */
-    public function search(?bool $isFeatured, int $numPage = 0, int $limit = 0) : array
+    public function search(?bool $isFeatured, int $numPage = 0, int $limit = -1) : array
     {
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');


53) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:40    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     /** @throws QueryException
      * @throws AssertionFailedException
      */
-    public function search(?bool $isFeatured, int $numPage = 0, int $limit = 0) : array
+    public function search(?bool $isFeatured, int $numPage = 1, int $limit = 0) : array
     {
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');


54) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:40    [M] DecrementInteger

--- Original
+++ New
@@ @@
     /** @throws QueryException
      * @throws AssertionFailedException
      */
-    public function search(?bool $isFeatured, int $numPage = 0, int $limit = 0) : array
+    public function search(?bool $isFeatured, int $numPage = -1, int $limit = 0) : array
     {
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');


55) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:42    [M] IncrementInteger

--- Original
+++ New
@@ @@
      */
     public function search(?bool $isFeatured, int $numPage = 0, int $limit = 0) : array
     {
-        Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
+        Assertion::greaterOrEqualThan($numPage, 2, 'Page must be greater or equal than 1');
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
         $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {


56) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:42    [M] OneZeroInteger

--- Original
+++ New
@@ @@
      */
     public function search(?bool $isFeatured, int $numPage = 0, int $limit = 0) : array
     {
-        Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
+        Assertion::greaterOrEqualThan($numPage, 0, 'Page must be greater or equal than 1');
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
         $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {


57) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:42    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function search(?bool $isFeatured, int $numPage = 0, int $limit = 0) : array
     {
-        Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
+        
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
         $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {


58) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:43    [M] IncrementInteger

--- Original
+++ New
@@ @@
     public function search(?bool $isFeatured, int $numPage = 0, int $limit = 0) : array
     {
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
-        Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
+        Assertion::greaterOrEqualThan($limit, 2, 'Limit must be greater or equal than 1');
         $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {
             $criteria->where(Criteria::expr()->eq('featured', $isFeatured));


59) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:43    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function search(?bool $isFeatured, int $numPage = 0, int $limit = 0) : array
     {
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
-        Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
+        
         $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {
             $criteria->where(Criteria::expr()->eq('featured', $isFeatured));


60) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:43    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     public function search(?bool $isFeatured, int $numPage = 0, int $limit = 0) : array
     {
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
-        Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
+        Assertion::greaterOrEqualThan($limit, 0, 'Limit must be greater or equal than 1');
         $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {
             $criteria->where(Criteria::expr()->eq('featured', $isFeatured));


61) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:45    [M] Multiplication

--- Original
+++ New
@@ @@
     {
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
-        $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
+        $criteria = Criteria::create()->setFirstResult(($numPage - 1) / $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {
             $criteria->where(Criteria::expr()->eq('featured', $isFeatured));
         }


62) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:45    [M] IncrementInteger

--- Original
+++ New
@@ @@
     {
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
-        $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
+        $criteria = Criteria::create()->setFirstResult(($numPage - 2) * $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {
             $criteria->where(Criteria::expr()->eq('featured', $isFeatured));
         }


63) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:45    [M] Minus

--- Original
+++ New
@@ @@
     {
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
-        $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
+        $criteria = Criteria::create()->setFirstResult(($numPage + 1) * $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {
             $criteria->where(Criteria::expr()->eq('featured', $isFeatured));
         }


64) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:45    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
-        $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
+        $criteria = Criteria::create()->setFirstResult(($numPage - 0) * $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {
             $criteria->where(Criteria::expr()->eq('featured', $isFeatured));
         }


65) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:47    [M] NotIdentical

--- Original
+++ New
@@ @@
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
         $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
-        if (null !== $isFeatured) {
+        if (null === $isFeatured) {
             $criteria->where(Criteria::expr()->eq('featured', $isFeatured));
         }
         return $this->entityManager->createQueryBuilder()->select('c')->from(Product::class, 'c')->addCriteria($criteria)->getQuery()->getResult();


66) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:48    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
         $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {
-            $criteria->where(Criteria::expr()->eq('featured', $isFeatured));
+            
         }
         return $this->entityManager->createQueryBuilder()->select('c')->from(Product::class, 'c')->addCriteria($criteria)->getQuery()->getResult();
     }


67) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:68    [M] NotIdentical

--- Original
+++ New
@@ @@
     public function searchCount(?bool $isFeatured) : int
     {
         $criteria = Criteria::create();
-        if (null !== $isFeatured) {
+        if (null === $isFeatured) {
             $criteria->where(Criteria::expr()->eq('featured', $isFeatured));
         }
         return (int) $this->entityManager->createQueryBuilder()->select('count(c.id)')->from(Product::class, 'c')->addCriteria($criteria)->getQuery()->getSingleScalarResult();


68) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:69    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $criteria = Criteria::create();
         if (null !== $isFeatured) {
-            $criteria->where(Criteria::expr()->eq('featured', $isFeatured));
+            
         }
         return (int) $this->entityManager->createQueryBuilder()->select('count(c.id)')->from(Product::class, 'c')->addCriteria($criteria)->getQuery()->getSingleScalarResult();
     }


69) src/Infrastructure/Persistence/Doctrine/Repository/DoctrineProductRepository.php:72    [M] CastInt

--- Original
+++ New
@@ @@
         if (null !== $isFeatured) {
             $criteria->where(Criteria::expr()->eq('featured', $isFeatured));
         }
-        return (int) $this->entityManager->createQueryBuilder()->select('count(c.id)')->from(Product::class, 'c')->addCriteria($criteria)->getQuery()->getSingleScalarResult();
+        return $this->entityManager->createQueryBuilder()->select('count(c.id)')->from(Product::class, 'c')->addCriteria($criteria)->getQuery()->getSingleScalarResult();
     }
     public function ofId(ProductId $productId) : ?Product
     {


70) src/Infrastructure/Persistence/InMemory/InMemoryCategoryRepository.php:26    [M] Foreach_

--- Original
+++ New
@@ @@
     public function __construct(array $categories = [])
     {
         $this->categories = new ArrayCollection([]);
-        foreach ($categories as $analyticalTest) {
+        foreach (array() as $analyticalTest) {
             $this->save($analyticalTest);
         }
     }


71) src/Infrastructure/Persistence/InMemory/InMemoryCategoryRepository.php:27    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $this->categories = new ArrayCollection([]);
         foreach ($categories as $analyticalTest) {
-            $this->save($analyticalTest);
+            
         }
     }
     public function save(Category $category) : void


72) src/Infrastructure/Persistence/InMemory/InMemoryCategoryRepository.php:34    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function save(Category $category) : void
     {
         $id = $category->getId()->value();
-        $this->categories->set($id, $category);
+        
     }
     public function delete(Category $category) : void
     {


73) src/Infrastructure/Persistence/InMemory/InMemoryCategoryRepository.php:39    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function delete(Category $category) : void
     {
-        $this->categories->remove($category->getId()->value());
+        
     }
     /**
      * @throws DomainException


74) src/Infrastructure/Persistence/InMemory/InMemoryCategoryRepository.php:49    [M] LogicalNot

--- Original
+++ New
@@ @@
     public function ofIdOrFail(CategoryId $categoryId) : Category
     {
         $category = $this->categories->get($categoryId->value());
-        if (!$category instanceof Category) {
+        if ($category instanceof Category) {
             throw CategoryNotFoundException::create($categoryId->value());
         }
         return clone $category;


75) src/Infrastructure/Persistence/InMemory/InMemoryCategoryRepository.php:49    [M] InstanceOf_

--- Original
+++ New
@@ @@
     public function ofIdOrFail(CategoryId $categoryId) : Category
     {
         $category = $this->categories->get($categoryId->value());
-        if (!$category instanceof Category) {
+        if (!false) {
             throw CategoryNotFoundException::create($categoryId->value());
         }
         return clone $category;


76) src/Infrastructure/Persistence/InMemory/InMemoryCategoryRepository.php:49    [M] InstanceOf_

--- Original
+++ New
@@ @@
     public function ofIdOrFail(CategoryId $categoryId) : Category
     {
         $category = $this->categories->get($categoryId->value());
-        if (!$category instanceof Category) {
+        if (!true) {
             throw CategoryNotFoundException::create($categoryId->value());
         }
         return clone $category;


77) src/Infrastructure/Persistence/InMemory/InMemoryCategoryRepository.php:50    [M] Throw_

--- Original
+++ New
@@ @@
     {
         $category = $this->categories->get($categoryId->value());
         if (!$category instanceof Category) {
-            throw CategoryNotFoundException::create($categoryId->value());
+            CategoryNotFoundException::create($categoryId->value());
         }
         return clone $category;
     }


78) src/Infrastructure/Persistence/InMemory/InMemoryCategoryRepository.php:53    [M] CloneRemoval

--- Original
+++ New
@@ @@
         if (!$category instanceof Category) {
             throw CategoryNotFoundException::create($categoryId->value());
         }
-        return clone $category;
+        return $category;
     }
     public function ofId(CategoryId $categoryId) : ?Category
     {


79) src/Infrastructure/Persistence/InMemory/InMemoryProductRepository.php:27    [M] Foreach_

--- Original
+++ New
@@ @@
     public function __construct(array $products = [])
     {
         $this->products = new ArrayCollection([]);
-        foreach ($products as $product) {
+        foreach (array() as $product) {
             $this->save($product);
         }
     }


80) src/Infrastructure/Persistence/InMemory/InMemoryProductRepository.php:28    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $this->products = new ArrayCollection([]);
         foreach ($products as $product) {
-            $this->save($product);
+            
         }
     }
     public function save(Product $product) : void


81) src/Infrastructure/Persistence/InMemory/InMemoryProductRepository.php:34    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function save(Product $product) : void
     {
-        $this->products->set($product->getId()->value(), $product);
+        
     }
     /**
      * @throws AssertionFailedException


82) src/Infrastructure/Persistence/InMemory/InMemoryProductRepository.php:42    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function search(?bool $isFeatured, int $numPage, int $limit) : array
     {
-        Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
+        
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
         $results = $this->products;
         $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);


83) src/Infrastructure/Persistence/InMemory/InMemoryProductRepository.php:42    [M] OneZeroInteger

--- Original
+++ New
@@ @@
      */
     public function search(?bool $isFeatured, int $numPage, int $limit) : array
     {
-        Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
+        Assertion::greaterOrEqualThan($numPage, 0, 'Page must be greater or equal than 1');
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
         $results = $this->products;
         $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);


84) src/Infrastructure/Persistence/InMemory/InMemoryProductRepository.php:42    [M] IncrementInteger

--- Original
+++ New
@@ @@
      */
     public function search(?bool $isFeatured, int $numPage, int $limit) : array
     {
-        Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
+        Assertion::greaterOrEqualThan($numPage, 2, 'Page must be greater or equal than 1');
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
         $results = $this->products;
         $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);


85) src/Infrastructure/Persistence/InMemory/InMemoryProductRepository.php:43    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     public function search(?bool $isFeatured, int $numPage, int $limit) : array
     {
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
-        Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
+        Assertion::greaterOrEqualThan($limit, 0, 'Limit must be greater or equal than 1');
         $results = $this->products;
         $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {


86) src/Infrastructure/Persistence/InMemory/InMemoryProductRepository.php:43    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function search(?bool $isFeatured, int $numPage, int $limit) : array
     {
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
-        Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
+        
         $results = $this->products;
         $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {


87) src/Infrastructure/Persistence/InMemory/InMemoryProductRepository.php:43    [M] IncrementInteger

--- Original
+++ New
@@ @@
     public function search(?bool $isFeatured, int $numPage, int $limit) : array
     {
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
-        Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
+        Assertion::greaterOrEqualThan($limit, 2, 'Limit must be greater or equal than 1');
         $results = $this->products;
         $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {


88) src/Infrastructure/Persistence/InMemory/InMemoryProductRepository.php:48    [M] Minus

--- Original
+++ New
@@ @@
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
         $results = $this->products;
-        $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
+        $criteria = Criteria::create()->setFirstResult(($numPage + 1) * $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {
             $results = $this->products->filter(static fn(Product $product) => $product->getFeatured() === $isFeatured);
         }


89) src/Infrastructure/Persistence/InMemory/InMemoryProductRepository.php:48    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
         $results = $this->products;
-        $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
+        $criteria = Criteria::create()->setFirstResult(($numPage - 0) * $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {
             $results = $this->products->filter(static fn(Product $product) => $product->getFeatured() === $isFeatured);
         }


90) src/Infrastructure/Persistence/InMemory/InMemoryProductRepository.php:48    [M] IncrementInteger

--- Original
+++ New
@@ @@
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
         $results = $this->products;
-        $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
+        $criteria = Criteria::create()->setFirstResult(($numPage - 2) * $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {
             $results = $this->products->filter(static fn(Product $product) => $product->getFeatured() === $isFeatured);
         }


91) src/Infrastructure/Persistence/InMemory/InMemoryProductRepository.php:48    [M] Multiplication

--- Original
+++ New
@@ @@
         Assertion::greaterOrEqualThan($numPage, 1, 'Page must be greater or equal than 1');
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
         $results = $this->products;
-        $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
+        $criteria = Criteria::create()->setFirstResult(($numPage - 1) / $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {
             $results = $this->products->filter(static fn(Product $product) => $product->getFeatured() === $isFeatured);
         }


92) src/Infrastructure/Persistence/InMemory/InMemoryProductRepository.php:52    [M] NotIdentical

--- Original
+++ New
@@ @@
         Assertion::greaterOrEqualThan($limit, 1, 'Limit must be greater or equal than 1');
         $results = $this->products;
         $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
-        if (null !== $isFeatured) {
+        if (null === $isFeatured) {
             $results = $this->products->filter(static fn(Product $product) => $product->getFeatured() === $isFeatured);
         }
         return $results->matching($criteria)->toArray();


93) src/Infrastructure/Persistence/InMemory/InMemoryProductRepository.php:54    [M] Identical

--- Original
+++ New
@@ @@
         $results = $this->products;
         $criteria = Criteria::create()->setFirstResult(($numPage - 1) * $limit)->setMaxResults($limit);
         if (null !== $isFeatured) {
-            $results = $this->products->filter(static fn(Product $product) => $product->getFeatured() === $isFeatured);
+            $results = $this->products->filter(static fn(Product $product) => $product->getFeatured() !== $isFeatured);
         }
         return $results->matching($criteria)->toArray();
     }


94) src/Infrastructure/Persistence/InMemory/InMemoryProductRepository.php:66    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
         $results = $this->products;
         $criteria = Criteria::create();
-        if (null !== $isFeatured) {
+        if (null === $isFeatured) {
             $results = $this->products->filter(static fn(Product $product) => $product->getFeatured() === $isFeatured);
         }
         return $results->matching($criteria)->count();


95) src/Infrastructure/Persistence/InMemory/InMemoryProductRepository.php:68    [M] Identical

--- Original
+++ New
@@ @@
         $results = $this->products;
         $criteria = Criteria::create();
         if (null !== $isFeatured) {
-            $results = $this->products->filter(static fn(Product $product) => $product->getFeatured() === $isFeatured);
+            $results = $this->products->filter(static fn(Product $product) => $product->getFeatured() !== $isFeatured);
         }
         return $results->matching($criteria)->count();
     }
