<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="Uuid.php" path="/Shared/Application/ValueObject">
    <totals>
      <lines total="44" comments="6" code="38" executable="5" executed="5" percent="100.00"/>
      <methods count="4" tested="4" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="App\Shared\Application\ValueObject\Uuid" start="12" executable="5" executed="5" crap="4">
      <namespace name="App\Shared\Application\ValueObject"/>
      <method name="__construct" signature="__construct(string $value)" start="19" end="22" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="value" signature="value(): string" start="24" end="27" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="jsonSerialize" signature="jsonSerialize(): string" start="29" end="32" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="setValue" signature="setValue(string $value): void" start="37" end="42" crap="1" executable="2" executed="2" coverage="100"/>
    </class>
    <coverage>
      <line nr="21">
        <covered by="App\Tests\Unit\Application\Command\CreateCategory\CreateCategoryCommandHandlerTest::testCreateCategoryWithInvalidRequestBody"/>
        <covered by="App\Tests\Unit\Application\Command\CreateCategory\CreateCategoryCommandHandlerTest::testCreateCategoryWithValidRequestMustInsertRecord"/>
        <covered by="App\Tests\Unit\Application\Command\CreateCategory\CreateCategoryCommandHandlerTest::testCreateCategoryThatAlreadyExistsMustThrowException"/>
        <covered by="App\Tests\Unit\Application\Command\CreateProduct\CreateProductCommandHandlerTest::testCreateProductWithInvalidRequestMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\CreateProduct\CreateProductCommandHandlerTest::testCreateProductWithValidRequestButNoCategoryMustInsertRecord"/>
        <covered by="App\Tests\Unit\Application\Command\CreateProduct\CreateProductCommandHandlerTest::testCreateProductWithValidRequestIncludeCategoryMustInsertRecord"/>
        <covered by="App\Tests\Unit\Application\Command\DeleteCategory\DeleteCategoryCommandHandlerTest::testDeleteCategoryWithInvalidUUIDMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\DeleteCategory\DeleteCategoryCommandHandlerTest::testDeleteCategoryThatNotExistMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\DeleteCategory\DeleteCategoryCommandHandlerTest::testDeleteCategoryMustEraseRecord"/>
        <covered by="App\Tests\Unit\Application\Command\UpdateCategory\UpdateCategoryCommandHandlerTest::testUpdateCategoryWithInvalidRequestMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\UpdateCategory\UpdateCategoryCommandHandlerTest::testUpdateCategoryWithNotExistUUIDMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\UpdateCategory\UpdateCategoryCommandHandlerTest::testUpdateCategoryMustUpdateRecord"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveFeaturedProducts\RetrieveFeaturedProductsQueryHandlerTest::testRetrieveFeaturedProductsForPaginatorMutants"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveProducts\RetrieveProductsQueryHandlerTest::testRetrieveProductsWithEmptyRepository"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveProducts\RetrieveProductsQueryHandlerTest::testRetrieveProductsWithBadArguments"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveProducts\RetrieveProductsQueryHandlerTest::testRetrieveProductsForPaginatorMutants"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveProducts\RetrieveProductsQueryHandlerTest::testRetrieveProductsWithRecordsRepository"/>
        <covered by="App\Tests\Unit\Domain\Category\CategoryTest::testCreateCategory"/>
        <covered by="App\Tests\Unit\Domain\Category\CategoryTest::testCreateCategoryWithInvalidName"/>
        <covered by="App\Tests\Unit\Domain\Category\CategoryTest::testCreateCategoryWithInvalidDescription"/>
        <covered by="App\Tests\Unit\Domain\Product\ProductTest::testCreateProduct"/>
        <covered by="App\Tests\Unit\Domain\Product\ProductTest::testCreateProductBadPrice"/>
        <covered by="App\Tests\Unit\Domain\Product\ProductTest::testCreateProductWithBadCurrency"/>
        <covered by="App\Tests\Unit\Domain\Product\ProductTest::testCreateProductWithBadName"/>
      </line>
      <line nr="26">
        <covered by="App\Tests\Unit\Application\Command\CreateCategory\CreateCategoryCommandHandlerTest::testCreateCategoryWithValidRequestMustInsertRecord"/>
        <covered by="App\Tests\Unit\Application\Command\CreateCategory\CreateCategoryCommandHandlerTest::testCreateCategoryThatAlreadyExistsMustThrowException"/>
        <covered by="App\Tests\Unit\Application\Command\CreateProduct\CreateProductCommandHandlerTest::testCreateProductWithInvalidRequestMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\CreateProduct\CreateProductCommandHandlerTest::testCreateProductWithValidRequestButNoCategoryMustInsertRecord"/>
        <covered by="App\Tests\Unit\Application\Command\CreateProduct\CreateProductCommandHandlerTest::testCreateProductWithValidRequestIncludeCategoryMustInsertRecord"/>
        <covered by="App\Tests\Unit\Application\Command\DeleteCategory\DeleteCategoryCommandHandlerTest::testDeleteCategoryThatNotExistMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\DeleteCategory\DeleteCategoryCommandHandlerTest::testDeleteCategoryMustEraseRecord"/>
        <covered by="App\Tests\Unit\Application\Command\UpdateCategory\UpdateCategoryCommandHandlerTest::testUpdateCategoryWithInvalidRequestMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\UpdateCategory\UpdateCategoryCommandHandlerTest::testUpdateCategoryWithNotExistUUIDMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\UpdateCategory\UpdateCategoryCommandHandlerTest::testUpdateCategoryMustUpdateRecord"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveFeaturedProducts\RetrieveFeaturedProductsQueryHandlerTest::testRetrieveFeaturedProductsForPaginatorMutants"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveProducts\RetrieveProductsQueryHandlerTest::testRetrieveProductsForPaginatorMutants"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveProducts\RetrieveProductsQueryHandlerTest::testRetrieveProductsWithRecordsRepository"/>
        <covered by="App\Tests\Unit\Domain\Category\CategoryTest::testCreateCategory"/>
        <covered by="App\Tests\Unit\Domain\Product\ProductTest::testCreateProduct"/>
      </line>
      <line nr="31">
        <covered by="App\Tests\Unit\Application\Query\RetrieveFeaturedProducts\RetrieveFeaturedProductsQueryHandlerTest::testRetrieveFeaturedProductsForPaginatorMutants"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveProducts\RetrieveProductsQueryHandlerTest::testRetrieveProductsWithRecordsRepository"/>
        <covered by="App\Tests\Unit\Domain\Category\CategoryTest::testCreateCategory"/>
        <covered by="App\Tests\Unit\Domain\Product\ProductTest::testCreateProduct"/>
      </line>
      <line nr="39">
        <covered by="App\Tests\Unit\Application\Command\CreateCategory\CreateCategoryCommandHandlerTest::testCreateCategoryWithInvalidRequestBody"/>
        <covered by="App\Tests\Unit\Application\Command\CreateCategory\CreateCategoryCommandHandlerTest::testCreateCategoryWithValidRequestMustInsertRecord"/>
        <covered by="App\Tests\Unit\Application\Command\CreateCategory\CreateCategoryCommandHandlerTest::testCreateCategoryThatAlreadyExistsMustThrowException"/>
        <covered by="App\Tests\Unit\Application\Command\CreateProduct\CreateProductCommandHandlerTest::testCreateProductWithInvalidRequestMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\CreateProduct\CreateProductCommandHandlerTest::testCreateProductWithValidRequestButNoCategoryMustInsertRecord"/>
        <covered by="App\Tests\Unit\Application\Command\CreateProduct\CreateProductCommandHandlerTest::testCreateProductWithValidRequestIncludeCategoryMustInsertRecord"/>
        <covered by="App\Tests\Unit\Application\Command\DeleteCategory\DeleteCategoryCommandHandlerTest::testDeleteCategoryWithInvalidUUIDMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\DeleteCategory\DeleteCategoryCommandHandlerTest::testDeleteCategoryThatNotExistMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\DeleteCategory\DeleteCategoryCommandHandlerTest::testDeleteCategoryMustEraseRecord"/>
        <covered by="App\Tests\Unit\Application\Command\UpdateCategory\UpdateCategoryCommandHandlerTest::testUpdateCategoryWithInvalidRequestMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\UpdateCategory\UpdateCategoryCommandHandlerTest::testUpdateCategoryWithNotExistUUIDMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\UpdateCategory\UpdateCategoryCommandHandlerTest::testUpdateCategoryMustUpdateRecord"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveFeaturedProducts\RetrieveFeaturedProductsQueryHandlerTest::testRetrieveFeaturedProductsForPaginatorMutants"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveProducts\RetrieveProductsQueryHandlerTest::testRetrieveProductsWithEmptyRepository"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveProducts\RetrieveProductsQueryHandlerTest::testRetrieveProductsWithBadArguments"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveProducts\RetrieveProductsQueryHandlerTest::testRetrieveProductsForPaginatorMutants"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveProducts\RetrieveProductsQueryHandlerTest::testRetrieveProductsWithRecordsRepository"/>
        <covered by="App\Tests\Unit\Domain\Category\CategoryTest::testCreateCategory"/>
        <covered by="App\Tests\Unit\Domain\Category\CategoryTest::testCreateCategoryWithInvalidName"/>
        <covered by="App\Tests\Unit\Domain\Category\CategoryTest::testCreateCategoryWithInvalidDescription"/>
        <covered by="App\Tests\Unit\Domain\Product\ProductTest::testCreateProduct"/>
        <covered by="App\Tests\Unit\Domain\Product\ProductTest::testCreateProductBadPrice"/>
        <covered by="App\Tests\Unit\Domain\Product\ProductTest::testCreateProductWithBadCurrency"/>
        <covered by="App\Tests\Unit\Domain\Product\ProductTest::testCreateProductWithBadName"/>
      </line>
      <line nr="41">
        <covered by="App\Tests\Unit\Application\Command\CreateCategory\CreateCategoryCommandHandlerTest::testCreateCategoryWithValidRequestMustInsertRecord"/>
        <covered by="App\Tests\Unit\Application\Command\CreateCategory\CreateCategoryCommandHandlerTest::testCreateCategoryThatAlreadyExistsMustThrowException"/>
        <covered by="App\Tests\Unit\Application\Command\CreateProduct\CreateProductCommandHandlerTest::testCreateProductWithInvalidRequestMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\CreateProduct\CreateProductCommandHandlerTest::testCreateProductWithValidRequestButNoCategoryMustInsertRecord"/>
        <covered by="App\Tests\Unit\Application\Command\CreateProduct\CreateProductCommandHandlerTest::testCreateProductWithValidRequestIncludeCategoryMustInsertRecord"/>
        <covered by="App\Tests\Unit\Application\Command\DeleteCategory\DeleteCategoryCommandHandlerTest::testDeleteCategoryThatNotExistMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\DeleteCategory\DeleteCategoryCommandHandlerTest::testDeleteCategoryMustEraseRecord"/>
        <covered by="App\Tests\Unit\Application\Command\UpdateCategory\UpdateCategoryCommandHandlerTest::testUpdateCategoryWithInvalidRequestMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\UpdateCategory\UpdateCategoryCommandHandlerTest::testUpdateCategoryWithNotExistUUIDMustLaunchException"/>
        <covered by="App\Tests\Unit\Application\Command\UpdateCategory\UpdateCategoryCommandHandlerTest::testUpdateCategoryMustUpdateRecord"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveFeaturedProducts\RetrieveFeaturedProductsQueryHandlerTest::testRetrieveFeaturedProductsForPaginatorMutants"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveProducts\RetrieveProductsQueryHandlerTest::testRetrieveProductsWithEmptyRepository"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveProducts\RetrieveProductsQueryHandlerTest::testRetrieveProductsWithBadArguments"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveProducts\RetrieveProductsQueryHandlerTest::testRetrieveProductsForPaginatorMutants"/>
        <covered by="App\Tests\Unit\Application\Query\RetrieveProducts\RetrieveProductsQueryHandlerTest::testRetrieveProductsWithRecordsRepository"/>
        <covered by="App\Tests\Unit\Domain\Category\CategoryTest::testCreateCategory"/>
        <covered by="App\Tests\Unit\Domain\Category\CategoryTest::testCreateCategoryWithInvalidName"/>
        <covered by="App\Tests\Unit\Domain\Category\CategoryTest::testCreateCategoryWithInvalidDescription"/>
        <covered by="App\Tests\Unit\Domain\Product\ProductTest::testCreateProduct"/>
        <covered by="App\Tests\Unit\Domain\Product\ProductTest::testCreateProductBadPrice"/>
        <covered by="App\Tests\Unit\Domain\Product\ProductTest::testCreateProductWithBadCurrency"/>
        <covered by="App\Tests\Unit\Domain\Product\ProductTest::testCreateProductWithBadName"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_DECLARE">declare</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strict_types</token>
        <token name="T_EQUAL">=</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">App</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Shared</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Application</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">ValueObject</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6"/>
      <line no="7">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Assert</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Assertion</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="8">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Assert</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">AssertionFailedException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="9">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">JsonSerializable</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="10">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ReflectionClass</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="11"/>
      <line no="12">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Uuid</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">JsonSerializable</token>
      </line>
      <line no="13">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="14">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15"/>
      <line no="16">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="17">
        <token name="T_DOC_COMMENT">     * @throws AssertionFailedException</token>
      </line>
      <line no="18">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="19">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="20">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="21">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setValue</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="22">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="23"/>
      <line no="24">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">value</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="25">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="28"/>
      <line no="29">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">jsonSerialize</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="31">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="32">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="33"/>
      <line no="34">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="35">
        <token name="T_DOC_COMMENT">     * @throws AssertionFailedException</token>
      </line>
      <line no="36">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setValue</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">Assertion</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">uuid</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'%s must be a valid UUID.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ReflectionClass</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getShortName</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="40"/>
      <line no="41">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="43">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="44"/>
    </source>
  </file>
</phpunit>
